// Code generated by mockery v1.0.0. DO NOT EDIT.
package mocks

import cache "github.com/derek-elliott/url-shortener/cache"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Cache is an autogenerated mock type for the Cache type
type Cache struct {
	mock.Mock
}

// DeleteURL provides a mock function with given fields: token
func (_m *Cache) DeleteURL(token string) error {
	ret := _m.Called(token)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetURL provides a mock function with given fields: token
func (_m *Cache) GetURL(token string) (*cache.Shortener, error) {
	ret := _m.Called(token)

	var r0 *cache.Shortener
	if rf, ok := ret.Get(0).(func(string) *cache.Shortener); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cache.Shortener)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitCache provides a mock function with given fields: pass, host, port
func (_m *Cache) InitCache(pass string, host string, port int) error {
	ret := _m.Called(pass, host, port)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(pass, host, port)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetURL provides a mock function with given fields: token, url, ttl
func (_m *Cache) SetURL(token string, url string, ttl time.Duration) error {
	ret := _m.Called(token, url, ttl)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(token, url, ttl)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
